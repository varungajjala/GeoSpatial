//Closest
package geospatial.Operation4;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.*;
import org.apache.spark.broadcast.Broadcast;

// Class to store list of points
class list_points implements Serializable
{
	ArrayList<String> arr;
	
	list_points()
	{
		arr = new ArrayList<String>();
	}
}

// App class for finding closest pair 
public class App 
{		
    public static void main(String[] args)
    {
        // Creating Spark configuration and context
        SparkConf conf = new SparkConf().setAppName("App").setMaster("spark://192.168.117.139:7077");
        final JavaSparkContext spark = new JavaSparkContext(conf);
        spark.addJar("/home/nagarjuna/Downloads/operation4.jar");

        // Loading the data from text file
        JavaRDD<String> ip1 = spark.textFile("hdfs://master:54310/team17/operation4/FarthestPairandClosestPairTestData.csv");
        
        //Splitting up the points to get co-ordinates
        JavaRDD<String> words = ip1.flatMap(new FlatMapFunction<String, String>()
            {
                public Iterable<String> call(String point)
                {
                    return Arrays.asList(point.split(","));
                }
            }
        );

        // Broadcasting the RDD to all the partitions
        final Broadcast<List<String>> var1 = spark.broadcast(words.collect());
        
        // Checking least distance pairs in each partitions
        JavaRDD<list_points> res = words.mapPartitions(new FlatMapFunction<Iterator<String>, list_points>()
            {
                public Iterable<list_points> call(Iterator<String> pair)
                {
            	    List<String> list = var1.value();
            	    double min_dist = 0;
            	    ArrayList<list_points> result = new ArrayList<list_points>();
            	    list_points closest_points = new list_points();
            	    List out = new ArrayList<list_points>();
                
                    // For all the pairs present in the list
                    while(pair.hasNext())
                    {
                    	double point1_x = Double.parseDouble(pair.next());
                    	double point1_y = Double.parseDouble(pair.next());
                    	double point2_x = 0;
                    	double point2_y = 0;
                    	for(int i = 0; i < list.size(); i++)
                        {
                    		if(i%2 != 0)
                            {
                    			point2_y = Double.parseDouble(list.get(i));
                    			double dist = Distance(point1_x, point1_y, point2_x, point2_y);
                    			String point = point1_x + ","+ point1_y + "," + point2_x + "," + point2_y +"," + dist;                			
                    			if (min_dist == 0 || (dist !=0 && dist < min_dist))
                                {
                    				min_dist = dist;
                    				if (!closest_points.arr.isEmpty())
                                    {
                    					closest_points.arr.clear();	
                    				}
                    				
                    				closest_points.arr.add(point);
                    			}
                                else if(dist == min_dist)
                                {
                    				if(point1_x != point2_x || point1_y != point2_y)
                                    {
                    					closest_points.arr.add(point);        
                    				}
                    			}
                    		}
                            else
                            {
                    			point2_x = Double.parseDouble(list.get(i));
                    		}
                    	}
                    }
                
                    out.add(closest_points);
                    return out; 
                }
            }
        );           
        
        // Getting the least distance pairs from earlier partitions
        list_points least_dist_pairs = res.reduce(new Function2<list_points, list_points, list_points>()
            {
			    public list_points call(list_points list_1, list_points list_2)
                {
			        String[] first_set  = ((String)list_1.arr.get(0)).split(",");
			        String[] second_set = ((String)list_2.arr.get(0)).split(",");
				    if (Double.parseDouble(first_set[4]) < Double.parseDouble(second_set[4]))
                    {
					    return list_1;					
				    }
                    else if (Double.parseDouble(first_set[4]) == Double.parseDouble(second_set[4]))
                    {
					    list_1.arr.addAll(list_2.arr);
					    return list_1;
				    }
                    else
                    {
					    return list_2;
				    }
			    }
            }
        ); 

        ArrayList<String> closest_points = eliminateDups(least_dist_pairs);
        JavaRDD<String> output_closest_points = spark.parallelize(closest_points);
        output_closest_points.repartition(1).saveAsTextFile("hdfs://master:54310/team17/operation4/FarthestPairandClosestPairResult.txt");
    }
    
    // Elimates the duplicate coordinates
 	public static ArrayList<String> eliminateDups(list_points list_pairs)
     {
 		int size = list_pairs.arr.size();
         
         ArrayList<String> points = new ArrayList<String>();
         ArrayList<String> dup    = new ArrayList<String>();
        
         for (int i = 0; i < size-1; i++)
         {
         	if (dup.contains(list_pairs.arr.get(i)))
             {
         		continue;        	
         	}
             else
             {
         		points.add(list_pairs.arr.get(i));
         	}

         	String[] first_set = ((String)list_pairs.arr.get(i)).split(",");

         	for (int j = 1; j < size; j++)
             {
                 String[] second_set = ((String)list_pairs.arr.get(j)).split(",");
         		if((first_set[0].equals(second_set[2])) && (first_set[1].equals(second_set[3])))
                 {
         			dup.add(list_pairs.arr.get(j));        			
         		}
         	}
         }
 		return points;
 	}

    
    // This function calculates the distance between the two points
    static double Distance(double point1_x, double point1_y, double point2_x, double point2_y)
    {
    	return Math.pow((point1_x - point2_x), 2) + Math.pow((point1_y - point2_y), 2);
    }
}
